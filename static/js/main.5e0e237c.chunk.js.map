{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","components/SearchResults/SearchResults.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","SearchResults","searchResults","Spotify","getAccessToken","url","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","data","items","artists","uri","savePlaylist","trackUris","length","userId","jsonResponse","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","alert","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e0e237c.chunk.js","sourcesContent":["const clientId = 'e945d16fbe0f48bcbdbd8ff2436d2d45';\nconst redirectUri = 'http://localhost:3000/'; \nlet accessToken;\nconst Spotify = {\n    getAccessToken(){\n       if(accessToken){\n           return accessToken\n       }\n       //checks for a match \n           let url = window.location.href\n           const accessTokenMatch = url.match(/access_token=([^&]*)/);\n           const expiresInMatch = url.match(/expires_in=([^&]*)/);\n           if(accessTokenMatch && expiresInMatch){\n               accessToken = accessTokenMatch[1]\n               const expiresIn = Number(expiresInMatch[1])\n               //clears the parameters after token expiration\n               window.setTimeout(() => accessToken = '', expiresIn * 1000);\n               window.history.pushState('Access Token', null, '/');\n               return accessToken;}\n            else{\n                const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n                window.location = accessUrl\n            } \n        },\n    \n\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers:\n        {Authorization:`Bearer ${accessToken}`}})\n        .then( response => { \n                return response.json()\n            })\n            .then(data=> {\n                if(!data.tracks) { \n                    return []; \n                }\n                return data.tracks.items.map(track => ({\n                            id : track.id,\n                            name : track.name,\n                            artist : track.artists[0].name,\n                            album : track.album.name,\n                            uri : track.uri\n               } ));\n            });\n    },\n\n    savePlaylist(name, trackUris){\n        if(!name || !trackUris.length){\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization:`Bearer ${accessToken}`};\n        let userId; \n\n        return fetch('https://api.spotify.com/v1/me', { headers:  headers}\n        ).then(response => response.json())\n        .then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'Post',\n                body: JSON.stringify({ name: name})\n            }).then(response => response.json())\n            .then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\n                    headers: headers,\n                    method: 'Post',\n                    body: JSON.stringify({uris:trackUris})\n                })\n             })\n        })\n    }\n     \n }\n\nexport default Spotify;\n    "," import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {term: ''}\n    this.search = this.search.bind(this)\n    this.handleTermChange = this.handleTermChange.bind(this)\n  }\n\n  search(term){\n    this.props.onSearch(this.state.term)\n  }\n\n  handleTermChange(event){\n    this.setState({term: event.target.value})\n  }\n\n\n  render(){\n    return (\n      <div className=\"SearchBar\">\n        <input onChange = {this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <button onClick = {this.search} className=\"SearchButton\">SEARCH</button>\n      </div>\n    );\n  }\n}\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\n\nclass Track extends React.Component{\n  constructor(props){\n    super(props)\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n  }\n  addTrack(){\n    return this.props.onAdd(this.props.track)\n  }\n\n  removeTrack(){\n    return this.props.onRemove(this.props.track)\n  }\n\n\n  renderAction(props){\n    if (this.props.isRemoval){\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    else\n      {return <button className=\"Track-action\" onClick={this.addTrack}>+</button>}\n    }\n  render() { \n    return (\n      <div className=\"Track\">\n       <div className=\"Track-information\">\n        <h3>{this.props.track.name}</h3>\n        <p>{this.props.track.artist} | {this.props.track.album}</p>\n      </div>\n      {this.renderAction()}\n    </div>\n    ); \n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\n\nclass TrackList extends React.Component {\n  render(){\n    return (\n     <div className=\"TrackList\">\n     {\n      this.props.tracks.map(track => {\n             return < Track onAdd = {this.props.onAdd} \n                      onRemove = {this.props.onRemove} \n                      isRemoval = {this.props.isRemoval} \n                      track={track} \n                      key={track.id} />\n           })\n      }\n     </div>);\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this)\n  }\n\n  handleNameChange(event){\n    this.props.onNameChange(event.target.value)\n  }\n\n  render(){\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange = {this.handleNameChange}/>\n        <TrackList tracks  = {this.props.playlistTracks} \n        onRemove = {this.props.onRemove} \n        isRemoval = {true}/>\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\nexport default Playlist;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component{\n  render(){\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList isRemoval={false} \n        onAdd = {this.props.onAdd} \n        tracks = {this.props.searchResults} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Playlist from '../Playlist/Playlist';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    \n    this.state = {\n      searchResults:[], \n      playlistName: '',\n      playlistTracks:[ ],}\n    \n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName= this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return }\n    tracks.push(track)\n    this.setState({playlistTracks: tracks}) \n    };\n  \n  removeTrack(track){\n    let tracks = this.state.playlistTracks\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n    this.setState({playlistTracks: tracks}) \n      };\n  \n  updatePlaylistName(name){\n    this.setState({playlistName:name})\n      };\n\n  savePlaylist(){\n    alert('hello')\n    const trackUris = this.state.playlistTracks.map(track => track.uri);  \n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(()=> {\n      this.setState({playlistName: 'New Playlist', playlistTracks: []\n      })\n    }) \n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n    this.setState({searchResults: searchResults})\n    })\n  }\n\n  render(){ \n    return( \n      <div>\n       <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n       <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist onRemove = {this.removeTrack} \n            playlistTracks={this.state.playlistTracks} \n            playlistName={this.state.playlistName}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}/>\n          </div>\n       </div>\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}